PROTO_PATH 	= proto
GO 					= service.pb.go service.pb.gw.go swagger.go
JSON				= swagger/service.swagger.json

PACKAGE			= $(shell grep go_package proto/service.proto | sed 's/option go_package = "\(.*\)";/\1/')

default: build

all: clean build

build: $(GO) $(JSON)

%.pb.go: $(PROTO_PATH)/%.proto
	protoc --proto_path=$(PROTO_PATH) $(PROTOC_INC) --go_out=plugins=grpc:. $<

service.pb.gw.go: $(PROTO_PATH)/service.proto
	protoc --proto_path=$(PROTO_PATH) $(PROTOC_INC) --grpc-gateway_out=logtostderr=true:. $<

swagger/service.swagger.json: $(PROTO_PATH)/service.proto
	protoc --proto_path=$(PROTO_PATH) $(PROTOC_INC) --swagger_out=logtostderr=true:swagger $<

swagger.go: swagger/service.swagger.json
	(	echo '// Code generated by Makefile. DO NOT EDIT.'; \
		echo '// source: service.proto and service.swagger.json'; echo; \
		echo 'package $(PACKAGE)'; echo; \
		echo 'var Swagger = []byte(`'; \
		cat swagger/service.swagger.json | sed 's/`/`+"`"+`/g'; \
		echo '`)' \
	) > swagger.go

# swagger.go can also be done using `go generate .` but to keep it simple, we
# use the magic of bash and make

clean:
	$(RM) -f $(GO) $(JSON)
